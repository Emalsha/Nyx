#!/usr/bin/env node

/**
 * Module dependencies.
 */

var debug = require('debug')('nyx:server');
var http = require('http');
var database = require('../database/db');
var cluster =require('cluster');
const numCPU = require('os').cpus().length;
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');

/**
 * Create HTTP server.
 * Use Cluster for better performance
 */

if(cluster.isMaster){
    debug(`Master ${process.pid} is running`);

    // Fork works
    for (let i =0;i<numCPU;i++){
        cluster.fork();
    }

    cluster.on('exit',(worker,code,signal)=>{
        debug(`Worker ${worker.process.pid} died.`);
    });
}else{

    var app = require('../app');
    var aria2app = require('../aria2app');

    app.set('port', port);

    var server = http.createServer(app);
    var aria2server = http.createServer(aria2app);

    /**
     * Create database instant
     * Listen on provided port, on all network interfaces.
     */

    database.connect(function (err) {
        if (err){
            debug('Unable to connect MongoDB');
            process.exit(1);
        }else{
            server.listen(port);
            aria2server.listen(port+1);
        }
    });

    server.on('error', onError);
    server.on('listening', onListening);


    aria2server.on('error', onError);
    aria2server.on('listening', onListeningAriaServer);

    debug(`Worker ${process.pid} start`);
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function onListeningAriaServer() {
    let addr = aria2server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}